import logging

from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from main import paper
from tools.states import Payment
from core.helpers.tools import ChatState
from core.helpers.tools import chat_settings
from database.manager import UserManager

router = Router()
logger = logging.getLogger(__name__)
state = ChatState()


@router.callback_query(F.data == "buy_subscription")
async def get_sub(callback: types.CallbackQuery, pay_state: FSMContext):
    data = await pay_state.get_data()
    user_id = data['chatid']
    await paper.send_message(user_id,
                             "–ü—Ä–∏–≤–µ—Ç!\n–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ - –Ω–∞–ø–∏—à–∏ –¥–∞, –∏–ª–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç.")
    current_state = await pay_state.get_state()
    logging.info("current state %r", current_state)
    await pay_state.set_state(Payment.process)
    await callback.answer()


@router.callback_query(lambda c: c.data in chat_settings)
async def process_sender(callback: types.CallbackQuery):
    logger.info("Callback query received: %s", callback.data)
    settings = chat_settings[callback.data]
    state.active_chat = settings["active_chat"]
    if "thread_id" in settings:
        state.thread_id = settings["thread_id"]
    logging.info('State changed: active_chat=%s, thread_id=%s', state.active_chat, state.thread_id)
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("course_"))
async def process_catcher(callback: types.CallbackQuery, session: AsyncSession):
    logger.info("Callback query received: %s", callback.data)
    course_name = None
    manager = UserManager(session)

    if callback.data.startswith("course_"):
        if callback.data == "course_academy":
            course_name = "–ù–µ–π—Ä–æ–ø–∞–Ω–∫ –ê–∫–∞–¥–µ–º–∏—è (–û–±—â–∏–π –ø–æ—Ç–æ–∫)"
        elif callback.data == "course_np_pro":
            course_name = "–ù–ï–ô–†–û–ü–ê–ù–ö PRO (–ö–û–ù–¢–ï–ù–¢ –ü–û –ü–û–î–ü–ò–°–ö–ï) by Paperclip"
        elif callback.data == "course_np_basic":
            course_name = "–ù–ê–ß–ê–õ–¨–ù–´–ô #1 - –æ—Ç 0 –¥–æ –ø–∞–ª–∞–¥–∏–Ω–∞!"
        elif callback.data == "course_liquid":
            course_name = "–õ–ò–ö–í–ò–î –ö–£–†–° #1 - –ù–µ–π—Ä–æ–ø–∞–Ω–∫ –ê–∫–∞–¥–µ–º–∏—è"
        elif callback.data == "course_super_pro":
            course_name = "SUPER PRO#1 (DNB)"
        elif callback.data == "course_neuro":
            course_name = "–ù–ï–ô–†–û–§–ê–ù–ö –ö–£–†–° #1"
        elif callback.data == "course_nerve":
            course_name = "NERV3 –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å Level 99 #1"
        elif callback.data == "course_girls":
            course_name = "DNB –ö—É—Ä—Å - —Ç–æ–ª—å–∫–æ –¥–µ–≤—É—à–∫–∏! ü§ñü§ñü§ñ"

        if course_name:
            emails = await manager.get_emails_by_course(course_name=course_name)
            if emails:
                email_list = "\n".join(emails)
                await callback.message.answer(f"Email –∞–¥—Ä–µ—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫—É—Ä—Å–∞ '{course_name}':\n{email_list}")
            else:
                await callback.message.answer(f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –∫—É—Ä—Å–µ '{course_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫—É—Ä—Å.", show_alert=True)
